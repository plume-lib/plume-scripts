#!/bin/sh

# Outputs information about a CI job, when run under Azure Pipelines,
# CircleCI, or Travis CI.
#
# Typical use:
#
#   git -C /tmp/plume-scripts pull > /dev/null 2>&1 \
#     || git -C /tmp clone --depth 1 -q https://github.com/plume-lib/plume-scripts.git
#   eval `/tmp/plume-scripts/ci-info DEFAULT-ORGANIZATION`
#
# Here are the variables that it sets:
# CI_IS_PULL_REQUEST: Either "true" or "false" (without the quotes).
# CI_ORGANIZATION: The GitHub organization.  In a PR, refers to the source.
#   Optional argument DEFAULT-ORGANIZATION is used if no organization can be determined.
# CI_BRANCH_NAME: The name of the source branch (in a PR) or of the branch being tested.
# CI_COMMIT_RANGE: An argument to `git diff` with the range of commits IDs.
#    (Don't use it with `git log`, which interprets its argument differently.)
# CI_COMMIT_RANGE_START: The start element of CI_COMMIT_RANGE, a commit ID.
# CI_COMMIT_RANGE_END: The end element of CI_COMMIT_RANGE, a commit ID.
#
# For example use, see comments in file `lint-diff.py` in this directory.


DEBUG=""
if [ "$1" = "--debug" ] ; then
    DEBUG="--debug"
    shift
fi
if [ "$#" -gt 1 ] ; then
  echo "echo Usage: $0 [--debug] [DEFAULT-ORGANIZATION]"
  echo "Usage: $0 [--debug] [DEFAULT-ORGANIZATION]" >&2
  echo "exit 2"
  exit 2
fi

if [ "$DEBUG" = "--debug" ] ; then
  echo
  env | sort | sed -e 's/^/echo /'
  echo
  git log --graph | head --lines=10000 | sed -e 's/^/echo /'
  echo
  git branch -a
  echo
fi


### Organization

## Continuous integration services
if [ "$TRAVIS" = "true" ]; then
  CI_ORGANIZATION=${TRAVIS_PULL_REQUEST_SLUG%/*}
  if [ "$CI_ORGANIZATION" = "" ]; then
    CI_ORGANIZATION=${TRAVIS_REPO_SLUG%/*}
  fi
elif [ -n "$AZURE_HTTP_USER_AGENT" ]; then
  if [ "$BUILD_REASON" = "PullRequest" ]; then
    SLUG=`wget -q -O - https://api.github.com/repos/${BUILD_REPOSITORY_NAME}/pulls/${SYSTEM_PULLREQUEST_PULLREQUESTNUMBER} | jq .head.label | sed 's/"//g'`
    CI_ORGANIZATION=${SLUG%:*}
  else
    CI_ORGANIZATION=${BUILD_REPOSITORY_NAME%/*}
  fi
fi

## Git clone
if [ "$CI_ORGANIZATION" = "" ]; then
  URL=`git config --get remote.origin.url`
  SLUG=${URL#*:}
  CI_ORGANIZATION=${SLUG%/*}
  # TODO: Maybe add a sanity check here.
fi

## Default
if [ "$CI_ORGANIZATION" = "" ]; then
  CI_ORGANIZATION=$1
fi

### Other information (besides organization)

if [ -n "$SYSTEM_PULLREQUEST_TARGETBRANCH" ] ; then
  ## Azure Pipelines pull request
  CI_IS_PULL_REQUEST=true
  # WARNING!  $BUILD_SOURCEBRANCHNAME is just a name, not a full ref path.  For example,
  # $BUILD_SOURCEBRANCHNAME may be "merge" when $BUILD_SOURCEBRANCH is "refs/pull/2971/merge".
  CI_BRANCH_NAME=$SYSTEM_PULLREQUEST_SOURCEBRANCH
  # For CI_COMMIT_RANGE_START:  HEAD = $BUILD_SOURCEVERSION is a commit created by Azure; it isn't
  # in the repo.  Its first child HEAD^1 is the target branch (e.g., master); use that instead of
  # $SYSTEM_PULLREQUEST_TARGETBRANCH is not fetched into this repo.
  CI_COMMIT_RANGE_START=`git rev-parse HEAD^1`
  CI_COMMIT_RANGE_END=$SYSTEM_PULLREQUEST_SOURCECOMMITID
  CI_COMMIT_RANGE=${CI_COMMIT_RANGE_START}...${CI_COMMIT_RANGE_END}
elif [ -n "$BUILD_SOURCEBRANCH" ] ; then
  # It's not a pull request, but is a build for a branch (possibly master).
  if [ "$DEBUG" = "--debug" ] ; then
    echo "echo SYSTEM_PULLREQUEST_TARGETBRANCH=$SYSTEM_PULLREQUEST_TARGETBRANCH is not set but BUILD_SOURCEBRANCH=$BUILD_SOURCEBRANCH"
  fi
  # In Azure Pipelines:  BUILD_SOURCEBRANCH is a full ref path like "refs/heads/mybranch";
  # BUILD_SOURCEBRANCHNAME is a short name like "mybranch"; $BUILD_SOURCEVERSION is a commit ID.
  # some clients such as `git-clone-related` MUST be given a branch name, not a commit ID.
  CI_BRANCH_NAME=$BUILD_SOURCEBRANCHNAME
  if [ "$BUILD_SOURCEBRANCHNAME" = "master" ] ; then
    # This isn't right, because there could have been multiple pushes since the
    # last finished/successful CI job.
    CI_COMMIT_RANGE_START=`git rev-parse HEAD^1`
  else
    git fetch origin master
    CI_COMMIT_RANGE_START=`git rev-parse origin/master`
  fi
  CI_COMMIT_RANGE_END=$BUILD_SOURCEVERSION
  CI_COMMIT_RANGE=${CI_COMMIT_RANGE_START}...${CI_COMMIT_RANGE_END}
elif [ "$TRAVIS" = "true" ] ; then
  ## Travis CI
  CI_IS_PULL_REQUEST=$TRAVIS_PULL_REQUEST
  CI_BRANCH_NAME=${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH}
  echo "echo TRAVIS_PULL_REQUEST_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH;"
  echo "echo TRAVIS_BRANCH=$TRAVIS_BRANCH;"
  echo "echo CI_BRANCH_NAME=$CI_BRANCH_NAME;"
  # $TRAVIS_COMMIT_RANGE is empty for builds triggered by the initial commit of a new branch.
  CI_COMMIT_RANGE=$TRAVIS_COMMIT_RANGE

elif [ -n "$CIRCLE_COMPARE_URL" ] ; then
  ## CircleCI
  if [ -n "$CIRCLE_PULL_REQUEST" ]; then
    CI_IS_PULL_REQUEST=true
  else
    CI_IS_PULL_REQUEST=false
  fi
  CI_COMMIT_RANGE=$(echo "${CIRCLE_COMPARE_URL}" | cut -d/ -f7)
  if [ $CI_COMMIT_RANGE != *"..."* ]; then
    CI_COMMIT_RANGE_START=`git rev-parse ${COMMIT_RANGE}`
    CI_COMMIT_RANGE_END=`git rev-parse ${COMMIT_RANGE}`
    CI_COMMIT_RANGE=${CI_COMMIT_RANGE_START}...${CI_COMMIT_RANGE_END}
  fi
  CI_BRANCH_NAME=$CIRCLE_BRANCH

else
  # It's not a pull request (except maybe a re-run Azure Pipelines pull request).
  CI_IS_PULL_REQUEST=false
  # In git 2.22 and later, can use: CI_BRANCH_NAME=`git branch --show-current`  (and update test below).
  CI_BRANCH_NAME=`git branch | grep \* | cut -d ' ' -f2`
  # In an Azure Pipelines pull request, `git branch` yields "(HEAD detached at pull/4/merge)".
  # If you re-run a pull request via "Queue" rather than "Rebuild",
  # variables SYSTEM_PULLREQUEST_TARGETBRANCH and SYSTEM_PULLREQUEST_SOURCEBRANCH are not set.
  if [ "$CI_BRANCH_NAME" = '(HEAD' ] ; then
    CI_BRANCH_NAME=master
  fi
fi

## The above may have not set CI_COMMIT_RANGE.  Set it.

# Separate from "It's not a pull request" because sometimes this is not set for Travis.
if [ ! -n "$CI_COMMIT_RANGE" ]; then
  if [ "$DEBUG" = "--debug" ] ; then
    echo "echo Setting CI_COMMIT_RANGE from CI_BRANCH_NAME=$CI_BRANCH_NAME;"
  fi
  if [ "$CI_BRANCH_NAME" = "master" ]; then
    CI_COMMIT_RANGE_START=`git rev-parse HEAD^1`
    CI_COMMIT_RANGE_END=`git rev-parse HEAD`
  else      
    CI_COMMIT_RANGE_START=`git rev-parse master`
    CI_COMMIT_RANGE_END=`git rev-parse $CI_BRANCH_NAME`
  fi
  CI_COMMIT_RANGE=${CI_COMMIT_RANGE_START}...${CI_COMMIT_RANGE_END}
fi

if [ ! -n "$CI_COMMIT_RANGE_START" ]; then
  if [ "$DEBUG" = "--debug" ] ; then
    echo "echo Setting CI_COMMIT_RANGE_START from CI_COMMIT_RANGE=$CI_COMMIT_RANGE;"
  fi
  CI_COMMIT_RANGE_START=${CI_COMMIT_RANGE%%.*}
  CI_COMMIT_RANGE_END=${CI_COMMIT_RANGE##*.}
fi

### Print it out

echo "echo CI_ORGANIZATION=$CI_ORGANIZATION;"
echo "CI_ORGANIZATION=$CI_ORGANIZATION; export CI_ORGANIZATION;"
echo "echo CI_IS_PULL_REQUEST=$CI_IS_PULL_REQUEST;"
echo "CI_IS_PULL_REQUEST=$CI_IS_PULL_REQUEST; export CI_IS_PULL_REQUEST;"
echo "echo CI_BRANCH_NAME=$CI_BRANCH_NAME;"
echo "CI_BRANCH_NAME=$CI_BRANCH_NAME; export CI_BRANCH_NAME;"
echo "echo CI_COMMIT_RANGE=$CI_COMMIT_RANGE;"
echo "CI_COMMIT_RANGE=$CI_COMMIT_RANGE; export CI_COMMIT_RANGE;"
echo "echo CI_COMMIT_RANGE_START=$CI_COMMIT_RANGE_START;"
echo "CI_COMMIT_RANGE_START=$CI_COMMIT_RANGE_START; export CI_COMMIT_RANGE_START;"
echo "echo CI_COMMIT_RANGE_END=$CI_COMMIT_RANGE_END;"
echo "CI_COMMIT_RANGE_END=$CI_COMMIT_RANGE_END; export CI_COMMIT_RANGE_END;"

# Temporary, for backward compatibility
# Deprecated 2019-07-10; remove on 2020-07-10
if [ "$CI_IS_PULL_REQUEST" = "true" ]; then
  echo "CI_IS_PR=1; export CI_IS_PR;"
fi
# Deprecated 2019-12-10; remove on 2020-07-10
echo "echo CI_BRANCH=$CI_BRANCH_NAME;"
echo "CI_BRANCH=$CI_BRANCH_NAME; export CI_BRANCH;"
